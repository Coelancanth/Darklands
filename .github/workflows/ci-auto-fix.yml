name: Streamlined CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read
  checks: write

jobs:
  # Job 1: Quick verification (trust local hooks did their job)
  verify:
    name: 🔍 Verify Local Fixes
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: 🔍 Verify build cleanliness
      run: |
        echo "🔍 Verifying no build artifacts committed..."
        
        if find . -type d -name "bin" -o -name "obj" | grep -q .; then
          echo "❌ Build artifacts found in repo"
          exit 1
        else
          echo "✅ Repository is clean (no build artifacts)"
        fi
        
    - name: 🔍 Verify code formatting
      run: |
        echo "🔍 Verifying local hooks did their job..."
        
        # Check if code would be changed by formatting
        dotnet format src/Darklands.Core.csproj --verify-no-changes --verbosity diagnostic
        dotnet format tests/Darklands.Core.Tests.csproj --verify-no-changes --verbosity diagnostic
        
        echo "✅ Code formatting is correct (local hooks worked!)"
        
        # Clean up any build artifacts created during format verification
        echo "🧹 Cleaning up format verification artifacts..."
        find . -type d -name "bin" -o -name "obj" | grep -v .godot | xargs rm -rf || true

  # Job 2: Fast build and test
  test:
    name: 🧪 Build & Test
    runs-on: ubuntu-latest  
    needs: [verify]
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: 🏗️ Restore dependencies
      run: |
        echo "🔄 Restoring all project dependencies..."

        # Explicitly restore Tactical projects first (they have the NuGet packages)
        echo "📦 Restoring Tactical bounded context packages..."
        if [ -f "src/Tactical/Darklands.Tactical.Domain.csproj" ]; then
          dotnet restore src/Tactical/Darklands.Tactical.Domain.csproj
        fi
        if [ -f "src/Tactical/Darklands.Tactical.Application.csproj" ]; then
          dotnet restore src/Tactical/Darklands.Tactical.Application.csproj
        fi
        if [ -f "src/Tactical/Darklands.Tactical.Infrastructure.csproj" ]; then
          dotnet restore src/Tactical/Darklands.Tactical.Infrastructure.csproj
        fi

        # Restore Core project which references Tactical
        echo "📦 Restoring Core project..."
        dotnet restore src/Darklands.Core.csproj
        echo "✅ Core project dependencies restored"

        # Also restore test project dependencies
        echo "📦 Restoring test project..."
        dotnet restore tests/Darklands.Core.Tests.csproj
        echo "✅ All dependencies restored"

    - name: 🏗️ Build projects
      run: |
        echo "🧹 Cleaning previous build artifacts..."
        dotnet clean src/Darklands.Core.csproj --configuration Release
        dotnet clean tests/Darklands.Core.Tests.csproj --configuration Release
        echo "✅ Clean completed"

        echo "🏗️ Building Core and all dependencies..."
        # Build Core project which will also build all its project references (Tactical, etc.)
        dotnet build src/Darklands.Core.csproj --configuration Release --no-restore
        echo "✅ Core project and dependencies built"

        echo "🏗️ Building test project..."
        dotnet build tests/Darklands.Core.Tests.csproj --configuration Release --no-restore
        echo "✅ Test project built"
        
        # Godot project (optional - may need Godot runtime)
        dotnet build Darklands.csproj --configuration Release || {
          echo "ℹ️ Godot project build skipped (requires Godot runtime)"
        }
        
    - name: 🧪 Run tests
      run: |
        dotnet test tests/Darklands.Core.Tests.csproj \
          --configuration Release \
          --logger "console;verbosity=normal" \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults \
          --filter "FullyQualifiedName!~MediatR_Should_Discover_All_Handlers_In_Core_Assembly"
          
    - name: 📊 Upload coverage
      uses: codecov/codecov-action@v4
      if: always()
      with:
        directory: ./TestResults
        flags: unittests
        fail_ci_if_error: false

  # Job 3: Security and quality checks
  security:
    name: 🔒 Security & Quality
    runs-on: ubuntu-latest
    timeout-minutes: 3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: 🔒 Security scan
      run: |
        echo "🔒 Scanning for security issues..."
        
        # Check for hardcoded secrets (basic check) - more specific patterns
        if grep -r "password\s*=\s*[\"'].*[\"']" --include="*.cs" . || \
           grep -r "secret\s*=\s*[\"'].*[\"']" --include="*.cs" . || \
           grep -r "apikey\s*=\s*[\"'].*[\"']" --include="*.cs" . || \
           grep -r "connectionstring\s*=\s*[\"'].*[\"']" --include="*.cs" .; then
          echo "⚠️ Potential hardcoded credentials found"
          exit 1
        else
          echo "✅ No hardcoded credentials detected"
        fi
        
    - name: 📝 Validate commit messages (PR only)
      if: github.event_name == 'pull_request'
      run: |
        echo "📝 Validating commit messages..."
        
        # Simple conventional commit check
        git log --format=%s origin/main..HEAD | while read commit; do
          if echo "$commit" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\([a-zA-Z0-9_-]+\))?: .+|.*\[Phase [1-4]/4\]"; then
            echo "✅ $commit"
          else
            echo "⚠️ Non-conventional: $commit"
          fi
        done

  # Job 4: Success summary (only runs if all pass)
  success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [verify, test, security]
    if: success()
    
    steps:
    - name: 🎉 All checks passed
      run: |
        echo "🎉 All CI checks passed!"
        echo ""  
        echo "✅ Local hooks verification: PASSED"
        echo "✅ Build and tests: PASSED"
        echo "✅ Security scan: PASSED"
        echo ""
        echo "🚀 Ready to merge!"