name: Streamlined CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read
  checks: write

jobs:
  # Job 1: Build & Test (core validation - runs in parallel with security)
  test:
    name: 🧪 Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: 🏗️ Restore dependencies
      run: dotnet restore

    - name: 🏗️ Build projects
      run: |
        dotnet build src/Darklands.Core/Darklands.Core.csproj --configuration Release
        dotnet build tests/Darklands.Core.Tests/Darklands.Core.Tests.csproj --configuration Release

        # Godot project (optional - may need Godot runtime)
        dotnet build Darklands.csproj --configuration Release || {
          echo "ℹ️ Godot project build skipped (requires Godot runtime)"
        }

    - name: 🧪 Run tests
      run: |
        dotnet test tests/Darklands.Core.Tests/Darklands.Core.Tests.csproj \
          --configuration Release \
          --logger "console;verbosity=normal" \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults \
          --filter "FullyQualifiedName!~MediatR_Should_Discover_All_Handlers_In_Core_Assembly&FullyQualifiedName!~PlateTectonicsIntegrationTests&FullyQualifiedName!~Phase1ErosionIntegrationTests"

    - name: 📊 Upload coverage
      uses: codecov/codecov-action@v4
      if: always()
      with:
        directory: ./TestResults
        flags: unittests
        fail_ci_if_error: false

  # Job 2: Security & Quality (runs in parallel with test)
  security:
    name: 🔒 Security & Quality
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Verify repository cleanliness
      run: |
        echo "🔍 Checking for build artifacts in repo..."

        if find . -type d -name "bin" -o -name "obj" | grep -v .godot | grep -q .; then
          echo "❌ Build artifacts found in repository"
          find . -type d -name "bin" -o -name "obj" | grep -v .godot
          exit 1
        fi

        echo "✅ Repository is clean"

    - name: 🔒 Security scan
      run: |
        echo "🔒 Scanning for hardcoded secrets..."

        # Check for hardcoded secrets (basic check)
        if grep -r "password\s*=" --include="*.cs" . || \
           grep -r "secret\s*=" --include="*.cs" . || \
           grep -r "key\s*=" --include="*.cs" . | grep -v "Key.cs"; then
          echo "⚠️ Potential hardcoded credentials found"
          exit 1
        fi

        echo "✅ No hardcoded credentials detected"

    - name: 📝 Validate commit messages (PR only)
      if: github.event_name == 'pull_request'
      run: |
        echo "📝 Validating commit messages..."

        # Simple conventional commit check
        git log --format=%s origin/main..HEAD | while read commit; do
          if echo "$commit" | grep -qE "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\([a-zA-Z0-9_-]+\))?: .+|.*\[Phase [1-4]/4\]"; then
            echo "✅ $commit"
          else
            echo "⚠️ Non-conventional: $commit"
          fi
        done