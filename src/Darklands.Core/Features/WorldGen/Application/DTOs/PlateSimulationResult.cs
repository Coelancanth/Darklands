using System.Collections.Generic;
using Darklands.Core.Features.WorldGen.Domain;
using Darklands.Core.Features.WorldGen.Infrastructure.Algorithms;

namespace Darklands.Core.Features.WorldGen.Application.DTOs;

/// <summary>
/// Immutable result of world generation containing all terrain/climate data.
/// All arrays are indexed [y, x] (row-major).
/// </summary>
public record PlateSimulationResult
{
    /// <summary>
    /// Raw heightmap directly from the plate-tectonics native simulation (no post-process).
    /// Useful for diagnostics and visualization of native output.
    /// </summary>
    public float[,] RawHeightmap { get; init; }

    /// <summary>
    /// Plate ownership map (plate id per cell) from the native simulation.
    /// </summary>
    public uint[,] PlatesMap { get; init; }
    /// <summary>
    /// Heightmap with elevation values (0.0 = lowest, 1.0 = highest).
    /// Values below SeaLevel are underwater.
    /// NOTE: After erosion, this heightmap has carved valleys around rivers.
    /// </summary>
    public float[,] Heightmap { get; init; }

    /// <summary>
    /// Ocean mask (true = water, false = land).
    /// Derived from heightmap and flood fill from borders.
    /// </summary>
    public bool[,] OceanMask { get; init; }

    /// <summary>
    /// Precipitation map (0.0 = arid, 1.0 = very wet).
    /// Based on latitude and rain shadow effects.
    /// </summary>
    public float[,] PrecipitationMap { get; init; }

    /// <summary>
    /// Temperature map (0.0 = coldest, 1.0 = hottest).
    /// Based on latitude and elevation (elevation cooling).
    /// </summary>
    public float[,] TemperatureMap { get; init; }

    /// <summary>
    /// Classified biomes based on Holdridge life zones model.
    /// Combines elevation, precipitation, and temperature.
    /// </summary>
    public BiomeType[,] BiomeMap { get; init; }

    /// <summary>
    /// Rivers generated by erosion simulation.
    /// Each river has a path from source (mountain) to destination (ocean or lake).
    /// </summary>
    public List<River> Rivers { get; init; }

    /// <summary>
    /// Lakes formed where rivers couldn't reach the ocean.
    /// These are endpoints of rivers in landlocked basins.
    /// </summary>
    public List<(int x, int y)> Lakes { get; init; }

    /// <summary>
    /// Humidity map (0.0 = driest, 1.0 = wettest).
    /// Combines precipitation (1× weight) + irrigation (3× weight).
    /// Used for biome classification instead of raw precipitation.
    /// Represents effective moisture available to plants.
    /// </summary>
    public float[,] HumidityMap { get; init; }

    /// <summary>
    /// Watermap showing flow accumulation from 20k droplet simulation.
    /// Higher values indicate more water flowing through the cell.
    /// Thresholds: creek (5%), river (2%), main river (0.7%).
    /// </summary>
    public float[,] WatermapData { get; init; }

    /// <summary>
    /// Irrigation map showing moisture availability from nearby water.
    /// Spreads ocean influence via logarithmic kernel (21×21 radius).
    /// Represents coastal moisture and proximity to water bodies.
    /// </summary>
    public float[,] IrrigationMap { get; init; }

    /// <summary>
    /// Map width (all arrays have same dimensions)
    /// </summary>
    public int Width => Heightmap.GetLength(1);

    /// <summary>
    /// Map height (all arrays have same dimensions)
    /// </summary>
    public int Height => Heightmap.GetLength(0);

    public PlateSimulationResult(
        float[,] heightmap,
        bool[,] oceanMask,
        float[,] precipitationMap,
        float[,] temperatureMap,
        BiomeType[,] biomeMap,
        List<River> rivers,
        List<(int x, int y)> lakes,
        float[,] humidityMap,
        float[,] watermapData,
        float[,] irrigationMap,
        float[,] rawHeightmap,
        uint[,] platesMap)
    {
        Heightmap = heightmap;
        OceanMask = oceanMask;
        PrecipitationMap = precipitationMap;
        TemperatureMap = temperatureMap;
        BiomeMap = biomeMap;
        Rivers = rivers;
        Lakes = lakes;
        HumidityMap = humidityMap;
        WatermapData = watermapData;
        IrrigationMap = irrigationMap;
        RawHeightmap = rawHeightmap;
        PlatesMap = platesMap;
    }
}
